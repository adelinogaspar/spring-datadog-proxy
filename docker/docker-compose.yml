#### JUST A REMINDER
# create a .env file with this variables
#  DD_AGENT_HOST=dd-agent
#  DD_SITE=us5.datadoghq.com
#  DD_API_KEY=<your api key>

version: '3'
services:
  ### KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    networks:
      - broker-kafka
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.0
    networks:
      - broker-kafka
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  ##### POSTGRES
#  postgres:
#    image: postgres:15
#    container_name: postgres_db
#    restart: unless-stopped
#    environment:
#      - POSTGRES_USER
#      - POSTGRES_PASSWORD
#      - POSTGRES_DB
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./postgres_data:/var/lib/postgresql/data
#    networks:
#      - postgres_network
#
#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin
#    restart: unless-stopped
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@example.com
#      PGADMIN_DEFAULT_PASSWORD: admin
#    ports:
#      - "5050:80"
#    depends_on:
#      - postgres
#    networks:
#      - postgres_network

  ### DATADOG
  dd-agent:
    container_name: dd-agent
    image: gcr.io/datadoghq/agent:7
    restart: unless-stopped
    ports:
      - 8126:8126
      - 8125:8125/udp
    environment:
      - DD_API_KEY # Set your API key here
      - DD_SITE
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_APM_ENABLED=true
      - DD_PROCESS_AGENT_ENABLED=false
      - DD_LOGS_ENABLED=true
      - DD_APM_RECEIVER_SOCKET=/var/run/datadog/apm.socket
      - DD_DOGSTATSD_SOCKET=/var/run/datadog/dsd.socket
    volumes:
      - /var/run/datadog:/var/run/datadog
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring


  dd-reverse-proxy:
    build: ./dd-reverse-proxy
    container_name: dd-reverse-proxy
    restart: unless-stopped
    ports:
      - "8085:80"
    environment:
      - REAL_DEV_API_KEY=${DD_API_KEY}
      - REAL_STG_API_KEY=${DD_API_KEY}
    volumes:
      - ./dd-reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dd-reverse-proxy/api_keys.json:/etc/nginx/api_keys.json:ro
    network_mode: host
#    networks:
#      - monitoring

networks:
  monitoring:
    driver: bridge
  broker-kafka:
    driver: bridge

  postgres_network:
    driver: bridge